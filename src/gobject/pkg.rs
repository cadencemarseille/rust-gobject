// Copyright 2013 The rust-gobject authors.
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

extern mod extra;
extern mod rustc;
extern mod rustpkg;

use extra::time;
use rustpkg::api;
use std::io;
use std::os;
use std::run;
use std::str;
use std::util;
use std::vec;

fn cd(path: &Path) {
    if !os::change_dir(path) {
        fail2!("Package script error: Failed to `cd` into `{}`", path.to_str());
    }
}

fn do_install(args: ~[~str]) {
    let sysroot_arg = args[1].clone();
    let sysroot_path = Path(sysroot_arg);

    let gobject_libs = match os::getenv("GOBJECT_LIBS") {
        None => {
            let pkg_config_output = run::process_output("pkg-config", [~"--libs", ~"gobject-2.0"]);
            if pkg_config_output.status != 0 {
                fail!("Package script error: `pkg-config --libs gobject-2.0` failed");
            }
            let output_ptr = vec::raw::to_ptr(pkg_config_output.output);
            let output_len = pkg_config_output.output.len();
            let libs_str = unsafe { str::raw::from_buf_len(output_ptr, output_len) };
            os::setenv("GOBJECT_LIBS", libs_str);
            libs_str
        },
        Some(gobject_libs) => gobject_libs
    };
    // `pkg-config` adds a newline to the end, which we need to trim away because newlines
    // in link_args cause build issues.
    let trimmed_gobject_libs = gobject_libs.trim();
    debug!("GOBJECT_LIBS=\"%s\"", trimmed_gobject_libs);

    let workspace_path = os::getcwd();

    let src_path = workspace_path.push("src");
    let detail_src_path = src_path.push("gobject").push("detail");
    let paths_to_substitute = [detail_src_path.push("native.rs.in")];
    for path_to_substitute in paths_to_substitute.iter() {
        if !os::path_exists(path_to_substitute) {
            fail2!("Package script error: Source file `{}` does not exist.", path_to_substitute.to_str());
        }
        match path_to_substitute.filestem() {
            None => fail2!("Package script error: `{}` is a directory.", path_to_substitute.to_str()),
            Some(filestem) => {
                let output_path = path_to_substitute.with_filename(filestem);
                let r = match io::file_reader(path_to_substitute) {
                    Err(err_str) => fail2!("Package script error: Failed to open `{}` for reading: {}", path_to_substitute.to_str(), err_str),
                    Ok(r) => r
                };
                let w = match io::file_writer(&output_path, [io::Create]) {
                    Err(err_str) => fail2!("Package script error: Failed to open `{}` for writing: {}", output_path.to_str(), err_str),
                    Ok(w) => w
                };
                w.write_line("// -*- buffer-read-only: t -*-");
                w.write_line("// Generated by " + args[0] + " on " + time::now().rfc822());
                w.write_char('\n');

                do r.each_line |line| -> bool {
                    let substituted_line = str::replace(line, "@GOBJECT_LIBS@", trimmed_gobject_libs);
                    w.write_line(substituted_line);
                    true
                };
            }
        }
    }

    api::build_lib(sysroot_path, workspace_path, ~"gobject", rustpkg::version::ExactRevision(~"0.1"), Path("mod.rs"));
}

fn do_configs(args: ~[~str]) {
    util::ignore(args);
}

fn main() {
    let args = os::args();
    let args_len = args.len();

    if args_len < 2 {
        fail!("Package script requires a directory where rustc libraries live as the first argument");
    } else if args_len < 3 {
        fail!("Package script requires a command as the second argument");
    }

    if args[2] == ~"install" {
        do_install(args);
    } else if args[2] == ~"configs" {
        do_configs(args);
    } else {
        fail2!("Package script error: Unsupported command `{}`", args[2]);
    }
}
